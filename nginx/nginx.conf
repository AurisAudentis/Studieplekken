http {
	lua_package_path "/etc/skywalking-nginx-lua/lib/?.lua;;";
	
	# Buffer represents the register inform and the queue of the finished segment
	lua_shared_dict tracing_buffer 100m;
	
	# Init is the timer setter and keeper
	# Setup an infinite loop timer to do register and trace report.
	init_worker_by_lua_block {
		local metadata_buffer = ngx.shared.tracing_buffer
		
		# -- Set service name
		metadata_buffer:set('serviceName', 'User Service Name')
		# -- Instance means the number of Nginx deployment, does not mean the worker instances
		metadata_buffer:set('serviceInstanceName', 'User Service Instance Name')
		
		# -- set random seed
		require("skywalking.util").set_randomseed()
		require("skywalking.client"):startBackendTimer("http://backend:8080")
	}

	upstream studieplekken_backend {
	   server backend:8080;
	   keepalive 32;
	}

	upstream studieplekken_frontend {
	   server frontend:80;
	   keepalive 32;
	}

	
	server {
		server_name localhost;
		
		listen 80 default_server;
		listen [::]:80 default_server;
		listen 443 ssl http2 default_server;
		listen [::]:443 ssl http2 default_server;
		ssl_certificate /etc/ssl/certs/studieplekken.ugent.be.crt;
		ssl_certificate_key /etc/ssl/private/studieplekken.ugent.be.key;
		listen 8080;
		
		location ^~ /api/ {
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			
			
			rewrite_by_lua_block {
				# ------------------------------------------------------
				# -- NOTICE, this should be changed manually
				# -- This variable represents the upstream logic address
				# -- Please set them as service logic name or DNS name
				# --
				# -- Currently, we can not have the upstream real network address
				# ------------------------------------------------------
				require("skywalking.tracer"):start("upstream service")
				# -- If you want correlation custom data to the downstream service
				# require("skywalking.tracer"):start("upstream service", {custom = "custom_value"})
			}
			
			# -- Target upstream service
			proxy_pass http://studieplekken_backend/api/;
			
			body_filter_by_lua_block {
				if ngx.arg[2] then
				require("skywalking.tracer"):finish()
				end
			}
			
			log_by_lua_block {
				require("skywalking.tracer"):prepareForReport()
			}
		}
		
		location / {
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			
			rewrite_by_lua_block {
				#------------------------------------------------------
				#-- NOTICE, this should be changed manually
				#-- This variable represents the upstream logic address
				#-- Please set them as service logic name or DNS name
				#--
				#-- Currently, we can not have the upstream real network address
				#------------------------------------------------------
				require("skywalking.tracer"):start("upstream service")
				#-- If you want correlation custom data to the downstream service
				# -- require("skywalking.tracer"):start("upstream service", {custom = "custom_value"})
			}
			
			# -- Target upstream service
			proxy_pass http://studieplekken_frontend/;
			
			body_filter_by_lua_block {
				if ngx.arg[2] then
				require("skywalking.tracer"):finish()
				end
			}
			
			log_by_lua_block {
				require("skywalking.tracer"):prepareForReport()
			}
		}
	}
}
