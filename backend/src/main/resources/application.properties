# Setting profile for Spring
spring.profiles.active=db

# https configuration
# Probably not necessary because there is probably a reverse proxy that takes care of https
# server.ssl.key-store-type=PKCS12
# server.ssl.key-store=classpath:server.p12
# server.ssl.key-store-password=

# configuration for sending verification mail
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=blok2.bach@gmail.com
spring.mail.password=rledkcecrdiehddj
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# url sent to user for verification
verification.url=/verify
verification.mail.template=ENGLISH VERSION BELOW\n\nBeste %s\n\nKlik op de volgende link om uw account te verifiëren: %s\n\n---\n\nDear %s\n\nClick on this link to verify your account: %s
verification.mail.subject=UGent verificatie nieuw BlokAtUGent-account

# when login fails, users are redirected to this url which will show the error messages
# IF CHANGED HERE, THEN ALSO CHANGE IN THE ENVIRONMENT IN THE FRONT-END
loginfailurl=/fail

# CAS URL
casLoginUrl=https://login.ugent.be

# Base and host url of application
urlBase=
hostUrl=https://localhost:8080

# emails of UGent users that are allowed not to use CAS (TODO: development only)
allowed-ugent-users-to-login-without-cas=admin;student;scanmedewerker;student-scanmedewerker

# credentials for database
URL=jdbc:postgresql://localhost:5433/blokatugent
user=postgres
pass=postgres

# Google recaptcha keys
# google.recaptcha.key.site=6LdTNOgUAAAAAMgnX5OGO39xMYRU0of2HaEbc7dC
# google.recaptcha.secret.key=6LdTNOgUAAAAAKZPLut_E92CSslNqAkMy1ppwIC_
# google.recaptcha.verify.url=https://www.google.com/recaptcha/api/siteverify

# mail template to send to absent students
absentStudents.mail.subject=Afwezigheid voor reservatie/ Absence for reservation
absentStudents.mail.template=ENGLISH VERSION BELOW\n\nBeste Student,\n\nU was afwezig voor uw reservatie vandaag.\nHiervoor heeft u strafpunten gekregen. Van zodra u te veel strafpunten heeft kan u geen reservaties meer maken\n\n---\n\nDear student,\n\nYou were absent for your reservation today.\nDue to this you have received penalty points. Please note that you can not make a reservation if you have too many penalty points.

# inlcude all endpoints for the actuator (TODO: development only)
management.endpoints.web.exposure.include=*

# queries for table public.locations
all_locations=select name, number_of_seats, number_of_lockers, maps_frame, image_url, address, start_period_lockers, end_period_lockers, lang_enum, description     from public.locations         join public.location_descriptions on location.name = location_descriptions.location_name
get_location=select name, number_of_seats, number_of_lockers, maps_frame, image_url, address, start_period_lockers, end_period_lockers, lang_enum, description from public.location     join public.location_descriptions on location.name = location_descriptions.location_name WHERE name = ?
delete_location=DELETE FROM public.location WHERE name = ?
insert_location=INSERT INTO public.location (name, number_of_seats, number_of_lockers, maps_frame, image_url, address) VALUES (?, ?, ?, ?, ?, ?)
update_location=UPDATE public.location SET name = ?, number_of_seats = ?, number_of_lockers = ?, maps_frame = ?, image_url = ?, address = ?, start_period_lockers = ?, end_period_lockers = ? WHERE name = ?

# queries for table LOCATION_RESERVATION
get_location_reservations_of_user_by_id=select * FROM public.location_reservation where augentid = ?
get_location_reservations_of_user_by_name=SELECT * FROM public.location_reservation l JOIN public.user u ON l.augentid = u.augentid WHERE u.augentPreferredGivenName = ?
get_location_reservations_of_location=select * from public.location_reservation where location_name = ?
get_location_reservation=select * from public.location_reservation where augentid = ? and date = ?
get_absent_students=SELECT * FROM public.location_reservation WHERE location_name = ? and date = ? and ( attended is NULL or attended = false);
get_present_students=SELECT * FROM public.location_reservation WHERE location_name = ? and date = ? and attended = true;
count_location_reservations_of_location_for_date=SELECT count(1) FROM public.location_reservation WHERE location_name = ? and date = ?
set_all_location_reservations_attended=UPDATE public.location_reservation SET attended = true WHERE location_name = ? and date = ?
delete_location_reservation=DELETE FROM public.location_reservation where augentid = ? and date = ?
delete_location_reservations_of_location=DELETE FROM public.location_reservation WHERE location_name = ?
delete_location_reservations_of_location_and_date=DELETE FROM public.location_reservation WHERE location_name = ? and date = ?
delete_location_reservations_of_location_between_dates=DELETE FROM public.location_reservation WHERE location_name = ? and cast(substr(date,0,5) as int)*404 + cast(substr(date,6,2) as int)*31 + cast(substr(date,9,2) as int) BETWEEN ? AND ?
delete_location_reservations_of_user_by_id=DELETE FROM public.location_reservation WHERE augentid = ?
insert_location_reservation=INSERT INTO public.location_reservation (date, location_name, augentid) VALUES (?, ?, ?)
get_user_for_location_reservation= select augentid, augentpreferredgivenname, augentpreferredsn, mail, barcode FROM public.user where augentid = ?;
set_location_reservation_unattended=UPDATE public.location_reservation SET attended = false WHERE date = ? and augentId= ?
set_location_reservation_attended=UPDATE public.location_reservation SET attended = true WHERE date = ? and augentId= ?
todays_reservations=select name, count(case when date= ? then 1 end)        from public.location        left join public.location_reservation on location.name = location_reservation.location_name     group by name
update_location_reservations_of_user=UPDATE public.location_reservation SET augentid = ? WHERE augentid = ?
get_location_reservations_of_date=select * from public.location_reservation where location_name = ? and date = ?

# queries for table USER
# note: for formatting this query in an editor, change all three consecutive white spaces into one \n
get_user_by_<?>=/*   If you want to change the weekly percentage decrease, you must   change the factor and amount of weeks used in this recursive query.   Now, every week the amount is reduced with 20%, which means that points   will remain in existence for 5 weeks.   If you would like to change this to 10% (and an existence of 10 weeks)   then you'll have to change "- 0.2 * (week + 1) + 1" to "- 0.1 * (week + 1) + 1"   and "week + 1 <= 5" to "week + 1 <= 10".   */   with recursive x as (   select 0 week, 1.0 perc   union all   select week + 1, - 0.2 * (week + 1) + 1   from x   where week + 1 <= 5   )   SELECT u.augentid, u.role, u.augentpreferredgivenname, u.augentpreferredsn, u.mail, u.password, u.institution, u.barcode   , coalesce(floor(sum(case when b.event_code = 16662 then b.received_points else b.received_points * x.perc end))) as "penalty_points"   FROM public.user u   LEFT JOIN public.penalty_book b   ON b.user_augentid = u.augentid   LEFT JOIN x   ON floor(extract(days from (now() - to_timestamp(b.timestamp, 'YYYY-MM-DD HH24\:MI\:SS'))) / 7) = x.week   WHERE <?>   group by u.augentid, u.role, u.augentpreferredgivenname, u.augentpreferredsn, u.mail, u.password, u.institution, u.barcode;
get_user_by_mail=select * from public.user where mail = ?
get_all_users=select * from public.user
update_user_with_password=UPDATE public.user SET mail = ?, augentpreferredsn = ?, augentpreferredgivenname = ?, password = ?, institution = ?, augentid = ?, role = ?, penalty_points = ?, barcode = ?  WHERE mail = ?
update_user_without_password=UPDATE public.user SET mail = ?, augentpreferredsn = ?, augentpreferredgivenname = ?, institution = ?, augentid = ?, role = ?, penalty_points = ?, barcode = ?  WHERE mail = ?
count_accounts_with_email=select count(1) from public.user where mail = ?
insert_user=INSERT into public.user (mail, augentpreferredsn, augentpreferredgivenname, password, institution, augentid, role, penalty_points, barcode) VALUES (?, ?, ?, ?, ?, ?, ?, ?,?)
delete_user=DELETE FROM public.user where augentid = ?
set_mail_of_user_by_id=UPDATE public.user SET mail = ? WHERE augentid = ?

# queries for table USERS_TO_VERIFY
count_user_to_be_verified_by_id=SELECT count(1) FROM public.users_to_verify WHERE augentid = ?
insert_user_to_be_verified=INSERT into public.users_to_verify (mail, augentpreferredsn, augentpreferredgivenname, password, institution, augentid, role, penalty_points, barcode, verification_code, created_timestamp) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
get_user_to_be_verfied_by_verification_code=select * from public.users_to_verify where verification_code = ?
delete_user_to_be_verfied=DELETE FROM public.users_to_verify where verification_code = ?
daily_cleanup_user_to_be_verified=DELETE FROM public.users_to_verify where TO_TIMESTAMP(created_timestamp,'YYYY-MM-DD\\THH24:MI:SS') < now()- interval '1 days'

# queries for table LOCKER_RESERVATION
get_locker_reservations_of_user_by_id=select * from public.locker_reservation where user_id = ?
get_locker_reservations_of_location=select * from public.locker_reservation r join public.locker l ON r.locker_id = l.id WHERE l.location_name = ?
get_locker_reservations_of_location_without_key_brought_back=select * from public.locker_reservation r join public.locker l ON r.locker_id = l.id WHERE l.location_name = ? and r.key_brought_back = false
count_lockers_in_use_of_location=select count(1) from public.locker_reservation r join public.locker l on r.locker_id = l.id WHERE l.location_name = ? and r.key_brought_back = false
get_locker_reservation=select * from public.locker_reservation where user_id = ? and locker_id = ? and start_date = ? and end_date = ?
delete_locker_reservation=DELETE FROM public.locker_reservation where user_id = ? and locker_id = ? and start_date = ? and end_date = ?
delete_locker_reservation_of_locker=DELETE FROM public.locker_reservation WHERE locker_id = ?
delete_locker_reservations_of_user_by_id=DELETE FROM public.locker_reservation WHERE user_id = ?
insert_locker_reservation=INSERT INTO public.locker_reservation (user_id, locker_id, start_date, end_date, key_picked_up, key_brought_back) VALUES (?, ?, ?, ?, ?, ?)
update_locker_reservation=UPDATE public.locker_reservation SET key_picked_up = ?, key_brought_back = ? WHERE user_id = ? and locker_id = ? and start_date = ? and end_date = ?
get_accompanying_users=select * from public.locker_reservation where locker_id = ? and start_date = ?
get_locker_reservation_of_user=select start_date from public.locker_reservation where user_id = ?
get_locker_reservation_of_locker=select start_date, end_date, user_id from public.locker_reservation where locker_id = ?
daily_cleanup_reservation_of_locker=DELETE FROM public.locker_reservation where not key_picked_up and TO_TIMESTAMP(start_date,'YYYY-MM-DD\\THH24:MI:SS')< now()- interval '5 days'
get_locker_reservation_of_soundex_user_by_complete_name=select *        from public.locker_reservation      join public.user on augentid = user_id      join public.locker on id=locker_id      where metaphone(CONCAT(augentpreferredgivenname, ' ',augentpreferredsn),10)=metaphone(?, 10)  or    metaphone(CONCAT(augentpreferredgivenname, ' ',augentpreferredsn),10)=metaphone(?, 10)
get_locker_reservation_of_soundex_user_by_name=select *     from public.locker_reservation      join public.user on augentid = user_id      join public.locker on id=locker_id      where metaphone(augentpreferredgivenname,10)=metaphone(? , 5) or        metaphone(augentpreferredsn,10)=metaphone(? , 5)
update_locker_reservations_of_user=UPDATE public.locker_reservation SET user_id = ? WHERE user_id = ?

#queries for table LOCKER
get_locker=select * from public.locker where id = ?
get_lockers_of_location=SELECT * FROM public.locker WHERE location_name = ?
get_locker_ids_of_location=select id from public.locker where location_name = ?
delete_lockers_of_location=DELETE FROM public.locker WHERE location_name = ?
delete_lockers_of_location_from_number=DELETE FROM public.locker WHERE location_name = ? and number >= ?
insert_locker=INSERT INTO public.locker (number, location_name, student_limit) VALUES (?, ?, ?)
change_locker_location=UPDATE public.locker SET location_name = ? where location_name = ? 

#queries for table CALENDAR
get_calendar_of_location=select * from public.calendar where location_name = ?
get_calendar_day_count=SELECT count(1) FROM public.calendar WHERE date = ? and  location_name = ?
insert_calendar_day=INSERT INTO public.calendar (date, location_name, opening_time, closing_time, open_for_reservation_date) VALUES (?, ?, ?, ?, ?)
delete_calendar_of_location=DELETE FROM public.calendar WHERE location_name = ?
delete_calendar_day_of_location=DELETE FROM public.calendar WHERE location_name = ? and date = ?
delete_calendar_days_between_dates=DELETE FROM public.calendar WHERE location_name = ? and cast(substr(date,0,5) as int)*404 + cast(substr(date,6,2) as int)*31 + cast(substr(date,9,2) as int) BETWEEN ? AND ?
update_calendar_day_of_location=UPDATE public.calendar SET opening_time = ?, closing_time = ?, open_for_reservation_date = ? WHERE location_name = ? and date = ?
update_location_calendar=UPDATE public.calendar SET location_name = ? WHERE location_name = ?

# queries for table ROLES
get_roles=select * from public.roles

# queries for table PENALTY_POINTS
get_max_penalty_points=select * from public.penalty_points

# queries for DBPenaltyEventsDao
get_penalty_events=select e.code, e.points, e.public_accessible, d.lang_enum, d.description from penalty_events e join penalty_descriptions d on e.code = d.event_code;
get_penalty_event=select e.code, e.points, e.public_accessible, d.lang_enum, d.description from penalty_events e join penalty_descriptions d on e.code = d.event_code where e.code = ?;
get_penalties=select b.user_augentid, b.event_code, b.timestamp, b.reservation_date, b.received_points, b.reservation_location    from public.penalty_book b   where b.user_augentid = ?;
insert_penalty_event=INSERT INTO public.penalty_events(code, points, public_accessible) VALUES (?, ?, ?);
insert_penalty=insert into penalty_book(user_augentid, event_code, timestamp, reservation_date, reservation_location, received_points)   values (?, ?, ?, ?, ?, ?);
count_penalty_events_with_code = select count(1) from penalty_events where code = ?
insert_penalty_description=INSERT INTO public.penalty_descriptions(lang_enum, event_code, description) VALUES (?, ?, ?)
update_penalty_event=UPDATE public.penalty_events SET points=?, public_accessible=? WHERE code=?
update_penalty_description=UPDATE public.penalty_descriptions SET description=? WHERE lang_enum=? AND event_code=?
update_penalties_of_user=UPDATE public.penalty_book SET user_augentid = ? WHERE user_augentid = ?
delete_penalty_description=DELETE FROM public.penalty_descriptions WHERE lang_enum=? AND event_code=?
delete_penalty_event=DELETE FROM public.penalty_events WHERE code=?
delete_penalty=DELETE FROM public.penalty_book b WHERE b.user_augentid = ? AND b.event_code = ? AND b.timestamp = ? AND b.reservation_date = ? AND b.reservation_location = ? AND b.received_points = ?;
delete_penalties_of_user_by_id=DELETE FROM public.penalty_book WHERE user_augentid = ?

#queries for table scanners_location
get_locations_of_scanner=select location_name from public.scanners_location where augentid = ?
get_scanners_of_location=select augentid from public.scanners_location where location_name = ?
delete_scanners_of_location=DELETE FROM public.scanners_location where location_name = ?
delete_scanners_of_location_of_user_by_id=DELETE FROM public.scanners_location WHERE augentid = ?
insert_scanner_and_location=INSERT INTO public.scanners_location(augentid, location_name) VALUES (?, ?)
update_scanners_of_location_of_user=UPDATE public.scanners_location SET augentid = ? WHERE augentid = ?

#queries for table LOCATION_DESCRIPTIONS
delete_location_descriptions=DELETE from public.location_descriptions where location_name = ?
insert_location_descriptions=INSERT INTO public.location_descriptions(location_name, lang_enum, description) VALUES(?, ?, ?)

# columns

#columns for table CALENDAR
cal_location=location_name
cal_opening_hour=opening_time
cal_closing_hour=closing_time
cal_date=date
cal_open_reservation_date=open_for_reservation_date

#columns for table INSTITUTION
inst_name=name

#columns for table LOCATION
loc_name=name
loc_number_of_seats=number_of_seats
loc_number_of_lockers=number_of_lockers
loc_maps_frame=maps_frame
# deze description moet weg kunnen na de aanpassingen
loc_description=description
loc_image_url=image_url
loc_address=address
loc_start_period_lockers=start_period_lockers
loc_end_period_lockers=end_period_lockers

#columns for table LOCATION_RESERVATION
locres_date=date
locres_location=location_name
locres_attended=attended
locres_user=augentid

#columns for table LOCKER
locker_location=location_name
locker_number=number
locker_student_limit=student_limit
locker_id=id

#columns for table LOCKER_RESERVATION
lockerres_start=start_date
lockerres_locker_id=locker_id
lockerres_end=end_date
lockerres_user=user_id
lockerres_key_picked_up=key_picked_up
lockerres_key_brought_back=key_brought_back

#columns for table PENALTY_POINTS
pen_max=max

#columns for table ROLES
rol_type=type

#columns for table USER and USERS_TO_VERIFY
user_id=augentid
user_role=role
user_name=augentpreferredgivenname
user_surname=augentpreferredsn
user_penpoints=penalty_points
user_mail=mail
user_password=password
user_institution=institution
user_barcode=barcode
user_verification_code=verification_code

#columns for table LANGUAGES
lang_iso=iso
lang_enum=enum

#columns for table PENALTY_EVENTS
event_code=code
event_points=points
event_public_accessible=public_accessible

#columns for table PENALTY_DESCRIPTIONS
desc_lang_enum=lang_enum
desc_event_code=event_code
desc_desc=description

#columns for table PENALTY_BOOK
book_user_augentid=user_augentid
book_event_code=event_code
book_timestamp=timestamp
book_reservation_date=reservation_date
book_received_points=received_points
book_reservation_location=reservation_location

#columns for table SCANNERS_LOCATION
augent_id=augentid
location_name=location_name

#columns for LOCATION_DESCRIPTIONS
loc_desc_description=description
loc_desc_lang=lang_enum

# sql states
sql_state_duplicate_key=23505

# LDAP Config
ldap.url=ldaps://ldap.augent.be/
ldap.base=dc=augent,dc=be
ldap.userDn=augentID=870920101647,ou=applications,dc=augent,dc=be
ldap.password=eEIzrF+z
