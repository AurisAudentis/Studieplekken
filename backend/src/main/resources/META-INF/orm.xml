<?xml version="1.0" encoding="UTF-8" ?>
<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm" version="2.0">
    <named-native-query name="Location.getOpeningHoursOverview">
        <query>
            with x as (
                select t.timeslot_date, t.opening_hour, t.closing_hour, l.name as location_name
                from public.timeslots t
                         join public.locations l
                              on l.location_id = cp.location_id
                where t.timeslot_date >= ? and t.timeslot_date &lt;= ?
            ), y as (
                select timeslot_date, location_name
                     , min(opening_hour) as opening_time
                     , max(closing_hour) as closing_time
                from x
                group by timeslot_date, location_name
            ), z as (
                select timeslot_date, location_name
                     , case when extract(dow from timeslot_date) = 1 then to_char(opening_time, 'HH24:MI') || ' - ' || to_char(closing_time, 'HH24:MI') end as monday
                     , case when extract(dow from timeslot_date) = 2 then to_char(opening_time, 'HH24:MI') || ' - ' || to_char(closing_time, 'HH24:MI') end as tuesday
                     , case when extract(dow from timeslot_date) = 3 then to_char(opening_time, 'HH24:MI') || ' - ' || to_char(closing_time, 'HH24:MI') end as wednesday
                     , case when extract(dow from timeslot_date) = 4 then to_char(opening_time, 'HH24:MI') || ' - ' || to_char(closing_time, 'HH24:MI') end as thursday
                     , case when extract(dow from timeslot_date) = 5 then to_char(opening_time, 'HH24:MI') || ' - ' || to_char(closing_time, 'HH24:MI') end as friday
                     , case when extract(dow from timeslot_date) = 6 then to_char(opening_time, 'HH24:MI') || ' - ' || to_char(closing_time, 'HH24:MI') end as saturday
                     , case when extract(dow from timeslot_date) = 0 then to_char(opening_time, 'HH24:MI') || ' - ' || to_char(closing_time, 'HH24:MI') end as sunday
                from y
            ), p as (
                select location_name
                     , max(monday) as monday
                     , max(tuesday) as tuesday
                     , max(wednesday) as wednesday
                     , max(thursday) as thursday
                     , max(friday) as friday
                     , max(saturday) as saturday
                     , max(sunday) as sunday
                from z
                group by location_name
            )
            select *
            from p
            order by location_name;
        </query>
    </named-native-query>

    <named-native-query name="Location.getNextReservationMomentsOfAllLocations">
        <query>
            select l.name as locationName, min(t.reservable_from) as nextReservableFrom
            from public.locations l
                     join public.timeslots t
                          on t.location_id = l.location_id
            where t.reservable_from >= now()
            group by l.name
            order by l.name;
        </query>
    </named-native-query>
</entity-mappings>
