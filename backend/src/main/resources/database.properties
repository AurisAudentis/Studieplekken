# queries for table LOCATIONS
all_locations=select l.name, l.number_of_seats, l.number_of_lockers , l.image_url, l.description_dutch, l.description_english, l.forGroup , b.building_id, b.building_name, b.address , a.authority_id, a.authority_name, a.description from public.locations l join public.authority a on a.authority_id = l.authority_id join public.buildings b on b.building_id = l.building_id order by l.name;
get_location=select l.name, l.number_of_seats, l.number_of_lockers , l.image_url, l.description_dutch, l.description_english, l.forgroup , b.building_id, b.building_name, b.address , a.authority_id, a.authority_name, a.description from public.locations l join public.authority a on a.authority_id = l.authority_id join public.buildings b on b.building_id = l.building_id where l.name = ?;
get_locations_from_authority=select  l.name, l.number_of_seats, l.number_of_lockers , l.image_url, l.description_dutch, l.description_english, l.forGroup , b.building_id, b.building_name, b.address , a.authority_id, a.authority_name, a.description from public.locations l join public.authority a on a.authority_id = l.authority_id join public.buildings b on b.building_id = l.building_id where l.authority_id = ?;
get_locations_in_building=select  l.name, l.number_of_seats, l.number_of_lockers , l.image_url, l.description_dutch, l.description_english, l.forGroup , b.building_id, b.building_name, b.address , a.authority_id, a.authority_name, a.description from public.locations l join public.authority a on a.authority_id = l.authority_id join public.buildings b on b.building_id = l.building_id where l.building_id = ?;
locations_with_tag=select l.name, l.number_of_seats, l.number_of_lockers , l.image_url, l.description_dutch, l.description_english, l.forGroup , a.authority_id, a.authority_name, a.description , b.building_id, b.building_name, b.address from public.locations l join public.authority a on a.authority_id = l.authority_id join public.buildings b on b.building_id = l.building_id join public.location_tags lt on l.name = lt.location_id join public.tags t on t.tag_id = lt.tag_id where t.tag_id = ? order by l.name;
delete_location=delete from public.locations where name = ?;
delete_locations_from_authority=delete from public.locations where authority_id = ?;
insert_location=insert into public.locations (name, number_of_seats, number_of_lockers, image_url, authority_id, building_id, description_dutch, description_english, forGroup) values (?, ?, ?, ?, ?, ?, ?, ?, ?);
update_location=update public.locations set name = ?, number_of_seats = ?, number_of_lockers = ?, image_url = ?, authority_id = ?, building_id = ?, description_dutch = ?, description_english = ?, forGroup = ? where name = ?;

# queries for table BUILDINGS
all_buildings=select b.building_id, b.building_name, b.address from public.buildings b order by b.building_name;
get_building_by_id=select b.building_id, b.building_name, b.address from public.buildings b where b.building_id = ?;
add_building=insert into public.buildings (building_name, address) values (?, ?) RETURNING building_id;
update_building=update public.buildings set building_name = ?, address = ? where building_id = ?;
delete_building=delete from public.buildings b where b.building_id = ?;

# queries for table TAGS
all_tags=select t.tag_id, t.dutch, t.english from public.tags t order by t.dutch;
get_tag=select t.tag_id, t.dutch, t.english from public.tags t where t.tag_id = ?;
tags_from_location=select t.tag_id, t.dutch, t.english from public.tags t join public.location_tags lt on t.tag_id = lt.tag_id join public.locations l on l.name = lt.location_id where l.name = ? order by t.dutch;
add_tag=insert into public.tags (dutch, english) values (?, ?) RETURNING tag_id;
delete_tag=delete from tags where tag_id = ?;
update_tag=update public.tags set dutch= ?, english = ? where tag_id = ?;

# queries for table LOCATION_RESERVATION
get_location_reservations_where_<?>=/* If you want to change the weekly percentage decrease, you must change the factor and amount of weeks used in the recursive query. Now, every week the amount is reduced with 20%, which means that points will remain effective for 5 weeks. If you would like to change this to 10% (and an effectiveness of 10 weeks), then you'll have to change "- 0.2 * (week + 1) + 1" to "- 0.1 * (week + 1) + 1" and "week + 1 <= 5" to "week + 1 <= 10". Note: change get_user_by_<?> as well for consistency */ with recursive x as ( select 0 week, 1.0 perc union all select week + 1, - 0.2 * (week + 1) + 1 from x where week + 1 <= 5 ), y as ( select u.mail, u.augentpreferredsn, u.augentpreferredgivenname, u.password, u.institution , u.augentid, u.admin , lr.timeslot_date, lr.timeslot_seqnr as timeslot_sequence_number, lr.calendar_id, lr.attended, lr.user_augentid, lr.created_at , coalesce(floor(sum( case /* Blacklist event (16662) is permanent: no decrease in time. A blacklist event should be removed manually */ when pb.event_code = 16662 then pb.received_points else pb.received_points * x.perc end)), 0) as "penalty_points" from public.location_reservations lr join public.users u on u.augentid = lr.user_augentid left join public.penalty_book pb on pb.user_augentid = u.augentid left join x on floor(extract(days from (now() - to_timestamp(pb.timestamp, 'YYYY-MM-DD HH24\:MI\:SS'))) / 7) = x.week where <?> group by u.mail, u.augentpreferredsn, u.augentpreferredgivenname, u.password, u.institution , u.augentid, u.admin , lr.timeslot_seqnr, lr.timeslot_date, lr.calendar_id, lr.created_at, lr.attended, lr.user_augentid ) select y.mail, y.augentpreferredsn, y.augentpreferredgivenname, y.password, y.institution , y.augentid, y.admin, y.penalty_points , y.timeslot_date, y.timeslot_sequence_number, y.calendar_id, y.created_at, y.attended, y.user_augentid from y group by y.mail, y.augentpreferredsn, y.augentpreferredgivenname, y.password, y.institution , y.augentid, y.admin, y.penalty_points , y.timeslot_date, y.timeslot_sequence_number, y.calendar_id, y.created_at, y.attended, y.user_augentid;
count_location_reservations_of_location_for_timeslot=select count(1) from public.location_reservations lr INNER JOIN public.calendar_periods cp on lr.calendar_id = cp.calendar_id INNER JOIN public.locations l on cp.location_name = l.name where lr.calendar_id = ? and lr.timeslot_date = ? and lr.timeslot_seqnr = ?;
get_size_of_timeslot_location=select l.number_of_seats from public.calendar_periods cp INNER JOIN public.locations l on cp.location_name = l.name where cp.calendar_id = ?;
lock_location_reservation=LOCK TABLE public.location_reservations IN ACCESS EXCLUSIVE MODE;
delete_location_reservation=delete from public.location_reservations where user_augentid = ? and timeslot_date = ? and timeslot_seqnr = ? and calendar_id = ?;
delete_location_reservations_of_location=delete from public.location_reservations where location_name = ?;
delete_location_reservations_of_user=delete from public.location_reservations where user_augentid = ?;
delete_location_reservations_of_location_between_dates=delete from public.location_reservations where location_name = ? and cast(substr(date,0,5) as int)*404 + cast(substr(date,6,2) as int)*31 + cast(substr(date,9,2) as int) between ? and ?;
insert_location_reservation=insert into public.location_reservations (user_augentid, created_at, timeslot_date, timeslot_seqnr, calendar_id, attended) values (?, ?, ?, ?, ?, null);
set_location_reservation_unattended=update public.location_reservations set attended = false where date = ? and user_augentid = ?;
set_all_location_reservations_attended=update public.location_reservations set attended = true where location_name = ? and date = ?;
set_location_reservation_attended=update public.location_reservations set attended = true where date = ? and user_augentid = ?;
count_location_reservations_on_date=select l.name, count(case when lr.date = ? then 1 end) from public.locations l left join public.location_reservations lr on l.name = lr.location_name group by l.name order by l.name;
update_fk_location_reservations_to_location=update public.location_reservations set location_name = ? where location_name = ?;
update_fk_location_reservations_to_user=update public.location_reservations set user_augentid = ? where user_augentid = ?;

# queries for table USER
get_user_by_<?>=/* If you want to change the weekly percentage decrease, you must change the factor and amount of weeks used in the recursive query. Now, every week the amount is reduced with 20%, which means that points will remain effective for 5 weeks. If you would like to change this to 10% (and an effectiveness of 10 weeks), then you'll have to change "- 0.2 * (week + 1) + 1" to "- 0.1 * (week + 1) + 1" and "week + 1 <= 5" to "week + 1 <= 10". Note: change get_location_reservations_where_<?> as well for consistency */ with recursive x as ( select 0 week, 1.0 perc union all select week + 1, - 0.2 * (week + 1) + 1 from x where week + 1 <= 5 ) select u.augentid, u.admin, u.augentpreferredgivenname, u.augentpreferredsn , u.mail, u.password, u.institution , coalesce(floor(sum( case /* Blacklist event is permanent: no decrease in time. A blacklist event should be removed manually */ when b.event_code = 16662 then b.received_points else b.received_points * x.perc end)), 0) as "penalty_points" from public.users u left join public.penalty_book b on b.user_augentid = u.augentid left join x on floor(extract(days from (now() - to_timestamp(b.timestamp, 'YYYY-MM-DD HH24\:MI\:SS'))) / 7) = x.week where <?> group by u.augentid, u.admin, u.augentpreferredgivenname, u.augentpreferredsn, u.mail, u.password, u.institution order by u.augentpreferredsn, u.augentpreferredgivenname, u.augentid;
update_user=update public.users set mail = ?, augentpreferredsn = ?, augentpreferredgivenname = ?, password = ?, institution = ?, augentid = ?, admin = ?, penalty_points = ? where augentid = ?;
count_accounts_with_email=select count(1) from public.users where LOWER(mail) = LOWER(?);
insert_user=insert into public.users (mail, augentpreferredsn, augentpreferredgivenname, password, institution, augentid, admin, penalty_points) values (?, ?, ?, ?, ?, ?, ?, ?);
delete_user=delete from public.users where augentid = ?;
set_mail_of_user_by_id=update public.users set mail = ? where augentid = ?;

# queries for table USERS_TO_VERIFY
count_user_to_be_verified_by_id=select count(1) from public.users_to_verify where augentid = ?;
insert_user_to_be_verified=insert into public.users_to_verify (mail, augentpreferredsn, augentpreferredgivenname, password, institution, augentid, admin, verification_code, created_timestamp) values (?, ?, ?, ?, ?, ?, ?, ?, ?);
get_user_to_be_verfied_by_verification_code=select * from public.users_to_verify where verification_code = ?;
delete_user_to_be_verfied=delete from public.users_to_verify where verification_code = ?;
daily_cleanup_user_to_be_verified=delete from public.users_to_verify where TO_TIMESTAMP(created_timestamp, 'YYYY-MM-DD\\THH24:MI:SS') < now() - interval '1 days';

# queries for table ROLES_USER_AUTHORITY
delete_roles_user_authority_of_user=delete from public.roles_user_authority where user_id = ?;
delete_roles_user_authority_of_authority=delete from public.roles_user_authority where authority_id = ?;
update_fk_roles_user_authority_to_user=update public.roles_user_authority set user_id = ? where user_id = ?;
insert_role_user_authority=insert into public.roles_user_authority (user_id, authority_id) values (?, ?);
remove_role_user_authority=delete from public.roles_user_authority where user_id = ? and authority_id = ?;

# queries for table AUTHORITY
all_authorities=select a.authority_id, a.authority_name, a.description from public.authority a order by a.authority_name;
authorities_from_user=select a.authority_id, a.authority_name, a.description from public.authority a join public.roles_user_authority roles on a.authority_id = roles.authority_id join public.users u on roles.user_id = u.augentid where u.augentid = ? order by a.authority_name;
authority_get_users=select u.augentid, u.admin, u.augentpreferredgivenname, u.augentpreferredsn, u.penalty_points, u.mail, u.institution from public.users u join public.roles_user_authority roles on u.augentid = roles.user_id join public.authority a on roles.authority_id = a.authority_id where a.authority_id = ? order by u.augentid;
authority_from_name=select a.authority_id, a.authority_name, a.description from public.authority a where a.authority_name = ?;
authority_from_authority_id=select a.authority_id, a.authority_name, a.description from public.authority a where a.authority_id = ?;
insert_authority=insert into public.authority (authority_name, description) values (?, ?) RETURNING authority_id;
update_authority=update public.authority set authority_name = ?, description = ? where authority_id = ?;
delete_authority=delete from public.authority where authority_id = ?;
get_locations_manageable_by_user=select l.name, l.number_of_seats, l.number_of_lockers , l.image_url, l.description_dutch, l.description_english, l.forGroup , a.authority_id, a.authority_name, a.description , b.building_id, b.building_name, b.address from public.locations l join authority a on l.authority_id = a.authority_id join buildings b on b.building_id = l.building_id join roles_user_authority rua on rua.authority_id = a.authority_id where rua.user_id = ? order by l.name;
get_locations_in_authority=select l.name, l.number_of_seats, l.number_of_lockers , l.image_url, l.description_dutch, l.description_english, l.forGroup , a.authority_id, a.authority_name, a.description , b.building_id, b.building_name, b.address from public.locations l join authority a on l.authority_id = a.authority_id join buildings b on b.building_id = l.building_id where a.authority_id = ? order by l.name;

# queries for table LOCKER_RESERVATIONS
get_locker_reservations_where_<?>=with recursive x as ( select 0 week, 1.0 perc union all select week + 1, - 0.2 * (week + 1) + 1 from x where week + 1 <= 5 ), y as ( select u.mail, u.augentpreferredsn, u.augentpreferredgivenname, u.password, u.institution , u.augentid, u.admin , lr.user_augentid, lr.key_pickup_date, lr.key_return_date, lr.location_name, lr.locker_number , coalesce(floor(sum( case /* Blacklist event (16662) is permanent: no decrease in time. A blacklist event should be removed manually */ when pb.event_code = 16662 then pb.received_points else pb.received_points * x.perc end)), 0) as "penalty_points" from public.locker_reservations lr join public.users u on u.augentid = lr.user_augentid left join public.penalty_book pb on pb.user_augentid = u.augentid left join x on floor(extract(days from (now() - to_timestamp(pb.timestamp, 'YYYY-MM-DD HH24\:MI\:SS'))) / 7) = x.week where <?> group by u.mail, u.augentpreferredsn, u.augentpreferredgivenname, u.password, u.institution , u.augentid, u.admin , lr.user_augentid, lr.key_pickup_date, lr.key_return_date, lr.location_name, lr.locker_number ) select y.mail, y.augentpreferredsn, y.augentpreferredgivenname, y.password, y.institution , y.augentid, y.admin, y.penalty_points , y.locker_number, y.location_name , y.user_augentid, y.key_pickup_date, y.key_return_date , l.name, l.number_of_seats, l.number_of_lockers, l.image_url, l.description_dutch, l.description_english, l.forGroup , b.building_id, b.building_name, b.address , a.authority_id, a.authority_name, a.description from y join public.locations l on l.name = y.location_name join public.authority a on a.authority_id = l.authority_id join public.buildings b on b.building_id = l.building_id group by y.mail, y.augentpreferredsn, y.augentpreferredgivenname, y.password, y.institution , y.augentid, y.admin, y.penalty_points , y.locker_number, y.location_name , y.user_augentid, y.key_pickup_date, y.key_return_date , l.name, l.number_of_seats, l.number_of_lockers, l.image_url , l.description_dutch, l.description_english, l.forGroup , b.building_id, b.building_name, b.address , a.authority_id, a.authority_name, a.description order by l.name;
count_lockers_in_use_of_location=select count(1) from public.locker_reservations r join public.lockers l on r.location_name = l.location_name and r.locker_number = l.number where l.location_name = ? and r.key_pickup_date <> '' and r.key_return_date = '';
delete_locker_reservation=delete from public.locker_reservations where location_name = ? and locker_number = ?;
delete_locker_reservations_of_user=delete from public.locker_reservations where user_augentid = ?;
delete_locker_reservations_in_location=delete from public.locker_reservations where location_name = ?;
insert_locker_reservation=insert into public.locker_reservations (location_name, locker_number, user_augentid, key_pickup_date, key_return_date) values (?, ?, ?, ?, ?);
update_locker_reservation=update public.locker_reservations set key_pickup_date = ?, key_return_date = ? where location_name = ? and locker_number = ?;
update_fk_locker_reservations_to_location=update public.locker_reservations set location_name = ? where location_name = ?;
update_fk_locker_reservations_to_user=update public.locker_reservations set user_augentid = ? where user_augentid = ?;

# queries for table LOCKERS
get_lockers_where_<?>=select l.location_name, l.number , s.name, s.number_of_seats, s.number_of_lockers, s.image_url, s.description_dutch, s.description_english, s.forGroup , a.authority_id, a.authority_name, a.description , b.building_id, b.building_name, b.address from public.lockers l join public.locations s on s.name = l.location_name join public.authority a on a.authority_id = s.authority_id join public.buildings b on b.building_id = s.building_id where <?> order by s.name;
get_lockers_statuses_of_location=with recursive x as ( select 0 week, 1.0 perc union all select week + 1, - 0.2 * (week + 1) + 1 from x where week + 1 <= 5 ), lr as ( select location_name, locker_number, user_augentid, key_pickup_date, key_return_date from public.locker_reservations where key_return_date is NULL ), lockers as ( select l.location_name, l.number , s.name, s.number_of_seats, s.number_of_lockers, s.image_url , s.description_dutch, s.description_english, s.forGroup , a.authority_id, a.authority_name, a.description , b.building_id, b.building_name, b.address , lr.locker_number, lr.key_pickup_date, lr.key_return_date, lr.user_augentid , u.augentid, u.admin, u.augentpreferredgivenname, u.augentpreferredsn, u.penalty_points , u.mail, u.password, u.institution from public.lockers l join public.locations s on s.name = l.location_name join public.authority a on a.authority_id = s.authority_id join public.buildings b on b.building_id = s.building_id left join lr on lr.location_name = l.location_name and lr.locker_number = l.number left join public.users u on u.augentid = lr.user_augentid where l.location_name = ? ) select r.location_name, r.number , r.name, r.number_of_seats, r.number_of_lockers, r.image_url , r.description_dutch, r.description_english, r.forGroup , r.authority_id, r.authority_name, r.description , r.building_id, r.building_name, r.address , r.locker_number, r.key_pickup_date, r.key_return_date, r.user_augentid , r.augentid, r.admin, r.augentpreferredgivenname, r.augentpreferredsn, r.mail, r.password , r.institution, coalesce(floor(sum( case /* Blacklist event (16662) is permanent: no decrease in time. A blacklist event should be removed manually */ when pb.event_code = 16662 then pb.received_points else pb.received_points * x.perc end)), 0) as "penalty_points" from lockers r left join public.penalty_book pb on pb.user_augentid = r.augentid left join x on floor(extract(days from (now() - to_timestamp(pb.timestamp, 'YYYY-MM-DD HH24\:MI\:SS'))) / 7) = x.week group by r.location_name, r.number , r.name, r.number_of_seats, r.number_of_lockers, r.image_url , r.description_dutch, r.description_english, r.forGroup , r.authority_id, r.authority_name, r.description , r.building_id, r.building_name, r.address , r.locker_number, r.key_pickup_date, r.key_return_date, r.user_augentid , r.augentid, r.admin, r.augentpreferredgivenname, r.augentpreferredsn, r.mail, r.password , r.institution order by r.number;
delete_lockers_of_location=delete from public.lockers where location_name = ?;
delete_lockers_of_location_from_number=delete from public.lockers where location_name = ? and number >= ?;
insert_locker=/* Note: the column 'id' is a auto-increment primary key */ insert into public.lockers (number, location_name) values (?, ?);
delete_locker=delete from public.lockers where location_name = ? and number = ?;

# queries for DBPenaltyEventsDao
get_penalty_events=select e.code, e.points, d.lang_enum, d.description from penalty_events e join penalty_descriptions d on e.code = d.event_code order by e.code;
get_penalty_event=select e.code, e.points, d.lang_enum, d.description from penalty_events e join penalty_descriptions d on e.code = d.event_code where e.code = ?;
get_penalties_by_user=select b.user_augentid, b.event_code, b.timestamp, b.reservation_date , b.received_points, b.reservation_location, b.remarks from public.penalty_book b where b.user_augentid = ?;
get_penalties_by_location=select b.user_augentid, b.event_code, b.timestamp, b.reservation_date , b.received_points, b.reservation_location, b.remarks from public.penalty_book b where b.reservation_location = ?;
get_penalties_by_event_code=select b.user_augentid, b.event_code, b.timestamp, b.reservation_date , b.received_points, b.reservation_location, b.remarks from public.penalty_book b where b.event_code = ?;
insert_penalty_event=insert into public.penalty_events (code, points) values (?, ?);
insert_penalty=insert into penalty_book (user_augentid, event_code, timestamp, reservation_date, reservation_location, received_points, remarks) values (?, ?, ?, ?, ?, ?, ?);
insert_penalty_description=insert into public.penalty_descriptions (lang_enum, event_code, description) values (?, ?, ?);
update_penalty_event=update public.penalty_events set code = ?, points = ? where code = ?;
update_fk_penalty_book_to_locations=update public.penalty_book set reservation_location = ? where reservation_location = ?;
update_fk_penalty_book_to_penalty_event=update public.penalty_book set event_code = ? where event_code = ?;
update_fk_penalty_book_to_user=update public.penalty_book set user_augentid = ? where user_augentid = ?;
delete_penalty_description=delete from public.penalty_descriptions where lang_enum = ? and event_code = ?;
delete_penalty_descriptions_by_event_code=delete from public.penalty_descriptions where event_code = ?;
delete_penalty_event=delete from public.penalty_events where code = ?;
delete_penalty=delete from public.penalty_book b where b.user_augentid = ? and b.event_code = ? and b.timestamp = ?;
delete_penalties_of_location=delete from public.penalty_book where reservation_location = ?;
delete_penalties_of_penalty_event=delete from public.penalty_book where event_code = ?;
delete_penalties_of_user=delete from public.penalty_book where user_augentid = ?;
count_descriptions_of_penalty_events=select count(1) from public.penalty_descriptions where event_code = ?;

# queries for SCANNERS_LOCATION
get_locations_of_scanner=select l.name, l.number_of_seats, l.number_of_lockers, l.image_url, l.description_dutch, l.description_english, l.forGroup , a.authority_id, a.authority_name, a.description , b.building_id, b.building_name, b.address from public.scanners_location sl join public.locations l on l.name = sl.location_name join public.authority a on a.authority_id = l.authority_id join public.buildings b on b.building_id = l.building_id where sl.user_augentid = ? order by l.name;
get_scanners_of_location=with recursive x as ( select 0 week, 1.0 perc union all select week + 1, - 0.2 * (week + 1) + 1 from x where week + 1 <= 5 ) select u.augentid, u.admin, u.augentpreferredsn, u.augentpreferredgivenname , u.mail, u.password, u.institution , coalesce(floor(sum( case /* Blacklist event (16662) is permanent: no decrease in time. A blacklist event should be removed manually */ when pb.event_code = 16662 then pb.received_points else pb.received_points * x.perc end)), 0) as "penalty_points" from public.scanners_location sl join public.users u on u.augentid = sl.user_augentid left join public.penalty_book pb on pb.user_augentid = u.augentid left join x on floor(extract(days from (now() - to_timestamp(pb.timestamp, 'YYYY-MM-DD HH24\:MI\:SS'))) / 7) = x.week where sl.location_name = ? group by u.augentid, u.admin, u.augentpreferredsn, u.augentpreferredgivenname , u.mail, u.password, u.institution;
delete_scanner_location=delete from public.scanners_location where location_name = ? and user_augentid = ?;
delete_scanners_of_location=delete from public.scanners_location where location_name = ?;
delete_locations_of_scanner=delete from public.scanners_location where user_augentid = ?;
insert_scanner_on_location=insert into public.scanners_location (location_name, user_augentid) values (?, ?);
count_scanner_on_location=select count(1) from public.scanners_location where user_augentid = ? and location_name = ?;
update_fk_scanners_location_to_locations=update public.scanners_location set location_name = ? where location_name = ?;
update_fk_scanners_location_to_user=update public.scanners_location set user_augentid = ? where user_augentid = ?;

# queries for LOCATION_TAG
get_tags_for_location=select t.tag_id, t.dutch, t.english from public.location_tags lt join public.tags t on t.tag_id = lt.tag_id where lt.location_id = ?;
get_locations_for_tag=select l.name, l.number_of_seats, l.number_of_lockers , l.image_url, l.description_dutch, l.description_english, l.forGroup , a.authority_id, a.authority_name, a.description , b.building_id, b.building_name, b.address from public.locations l join public.location_tags lt on l.name = lt.location_id join public.authority a on a.authority_id = l.authority_id join public.buildings b on b.building_id = l.building_id where lt.tag_id = ?;
add_tag_to_location=insert into public.location_tags (location_id, tag_id) values (?, ?) on conflict(location_id, tag_id) do nothing;
delete_tag_from_location=delete from public.location_tags where location_id = ? and tag_id = ?;
delete_all_tags_from_location=delete from public.location_tags where location_id = ?;
delete_tag_from_all_locations=delete from public.location_tags where tag_id = ?;
update_fk_location_tags_to_location=update public.location_tags set location_id = ? where location_id = ?;

# queries for CALENDAR_PERIODS
get_all_calendar_periods=select cp.calendar_id, cp.location_name, cp.starts_at, cp.ends_at, cp.opening_time, cp.closing_time, cp.reservable_from, cp.reservable, cp.timeslot_length, cp.locked_from , l.name, l.number_of_seats, l.number_of_lockers, l.image_url, l.description_dutch, l.description_english, l.forGroup, b.building_id, b.building_name, b.address , a.authority_id, a.authority_name, a.description from public.calendar_periods cp join public.locations l on l.name = cp.location_name join public.authority a on a.authority_id = l.authority_id join public.buildings b on l.building_id = b.building_id order by to_date(cp.starts_at || ' ' || cp.opening_time, 'YYYY-MM-DD HH24:MI');
get_calendar_periods=select cp.calendar_id, cp.location_name, cp.starts_at, cp.ends_at, cp.opening_time, cp.closing_time, cp.reservable_from, cp.reservable, cp.timeslot_length, cp.locked_from , l.name, l.number_of_seats, l.number_of_lockers, l.image_url, l.description_dutch, l.description_english, l.forGroup , a.authority_id, a.authority_name, a.description , b.building_id, b.building_name, b.address from public.calendar_periods cp join public.locations l on l.name = cp.location_name join public.authority a on a.authority_id = l.authority_id join public.buildings b on b.building_id = l.building_id where cp.location_name = ? order by cp.starts_at, cp.opening_time;
insert_calendar_period=insert into public.calendar_periods(location_name, starts_at, ends_at, opening_time, closing_time, reservable_from, reservable, timeslot_length, locked_from) values (?, ?, ?, ?, ?, ?, ?, ?, ?);
update_calendar_period=update public.calendar_periods set location_name = ?, starts_at = ?, ends_at = ?, opening_time = ?, closing_time = ?, reservable_from = ?, reservable = ?, timeslot_length = ?, locked_from = ? where calendar_id = ?;
get_calendar_period_by_id=select * from public.calendar_periods cp inner join public.locations l on cp.location_name = l.name inner join public.buildings b on b.building_id = l.building_id inner join public.authority a on a.authority_id = l.authority_id where cp.calendar_id = ?;
delete_calendar_period=delete from public.calendar_periods where location_name = ? and starts_at = ? and ends_at = ? and opening_time = ? and closing_time = ? and reservable = ? and timeslot_length = ?;
delete_calendar_periods_of_location=delete from public.calendar_periods where location_name = ?;
update_fk_location_name_in_calendar_periods=update public.calendar_periods set location_name = ? where location_name = ?;
# queries for RESERVATION_TIMESLOTS
get_reservation_timeslots=select rt.timeslot_sequence_number, rt.timeslot_date, rt.calendar_id from public.reservation_timeslots rt where calendar_id = ? order by rt.timeslot_date, rt.timeslot_sequence_number;
insert_reservation_timeslots=insert into public.reservation_timeslots(calendar_id, timeslot_sequence_number, timeslot_date) values (?, ?, ?);
# queries for CALENDAR_PERIODS_FOR_LOCKERS
get_calendar_periods_for_lockers_of_location=select cp.location_name, cp.starts_at, cp.ends_at, cp.reservable_from , l.name, l.number_of_seats, l.number_of_lockers, l.image_url, l.description_dutch, l.description_english, l.forGroup , a.authority_id, a.authority_name, a.description , b.building_id, b.building_name, b.address from public.calendar_periods_for_lockers cp join public.locations l on l.name = cp.location_name join public.authority a on a.authority_id = l.authority_id join public.buildings b on b.building_id = l.building_id where cp.location_name = ? order by cp.starts_at;
insert_calendar_period_for_lockers=insert into public.calendar_periods_for_lockers (location_name, starts_at, ends_at, reservable_from) values (?, ?, ?, ?);
update_calendar_period_for_lockers=update public.calendar_periods_for_lockers set location_name = ?, starts_at = ?, ends_at = ?, reservable_from = ? where location_name = ? and starts_at = ? and ends_at = ? and reservable_from = ?;
delete_calendar_period_for_lockers=delete from public.calendar_periods_for_lockers where location_name = ? and starts_at = ? and ends_at = ? and reservable_from = ?;
delete_calendar_periods_for_lockers_of_location=delete from public.calendar_periods_for_lockers where location_name = ?;
update_fk_location_name_in_calendar_periods_for_lockers=update public.calendar_periods_for_lockers set location_name = ? where location_name = ?;

# columns for table AUTHORITY
authority_authority_id=authority_id
authority_name=authority_name
authority_description=description

#columns for the table BUILDINGS
buildings_building_id=building_id
buildings_name=building_name
buildings_address=address

# columns for table LOCATIONS
location_name=name
location_number_of_seats=number_of_seats
location_number_of_lockers=number_of_lockers
location_maps_frame=maps_frame
location_building_id=building_id
location_authority_id=authority_id
location_description_dutch=description_dutch
location_description_english=description_english
location_forGroup=forGroup
location_image_url=image_url

#columns for the table TAGS
tags_tag_id=tag_id
tags_dutch=dutch
tags_english=english

# columns for LOCATION_TAGS
location_tags_location_id=location_id
location_tags_tag_id=tag_id

# columns for CALENDAR_PERIODS
calendar_period_id=calendar_id
calendar_period_location_name=location_name
calendar_period_starts_at=starts_at
calendar_period_ends_at=ends_at
calendar_period_opening_time=opening_time
calendar_period_closing_time=closing_time
calendar_period_reservable_from=reservable_from
calendar_period_locked_from=locked_from
calendar_period_reservable=reservable
calendar_period_timeslot_length=timeslot_length

# columns for RESERVATION_TIMESLOTS
timeslot_calendar_id=calendar_id
timeslot_sequence_number=timeslot_sequence_number
timeslot_date=timeslot_date

# columns for CALENDAR_PERIODS_FOR_LOCKERS
calendar_period_for_lockers_location_name=location_name
calendar_period_for_lockers_starts_at=starts_at
calendar_period_for_lockers_ends_at=ends_at
calendar_period_for_lockers_reservable_from=reservable_from

# columns for table INSTITUTIONS
institution_name=name

# columns for table USERS
user_augentid=augentid
user_name=augentpreferredgivenname
user_surname=augentpreferredsn
user_penalty_points=penalty_points
user_mail=mail
user_password=password
user_institution=institution
user_admin=admin

# columns for table LANGUAGES
language_enum=enum

# columns for table LOCATION_RESERVATIONS
location_reservation_created_at=created_at
location_reservation_timeslot=timeslot_id
location_reservation_timeslot_sequence_nr=timeslot_seqnr
location_reservation_calendar_id=calendar_id
location_reservation_attended=attended
location_reservation_user_augentid=user_augentid

# columns for table LOCKERS
locker_location=location_name
locker_number=number

# columns for table LOCKER_RESERVATIONS
locker_reservation_location_name=location_name
locker_reservation_locker_number=locker_number
locker_reservation_user_augentid=user_augentid
locker_reservation_key_pickup_date=key_pickup_date
locker_reservation_key_return_date=key_return_date

# columns for table PENALTY_EVENTS
penalty_event_code=code
penalty_event_points=points

# columns for table PENALTY_BOOK
penalty_book_user_augentid=user_augentid
penalty_book_event_code=event_code
penalty_book_timestamp=timestamp
penalty_book_reservation_date=reservation_date
penalty_book_received_points=received_points
penalty_book_reservation_location=reservation_location
penalty_book_remarks=remarks

# columns for table PENALTY_DESCRIPTIONS
penalty_description_lang_enum=lang_enum
penalty_description_event_code=event_code
penalty_description_description=description

# columns for table SCANNERS_LOCATION
scanners_location_name=location_name
scanners_location_user_augentid=user_augentid

# columns for table USERS_TO_VERIFY
utv_augentid=augentid
utv_role=role
utv_name=augentpreferredgivenname
utv_surname=augentpreferredsn
utv_mail=mail
utv_password=password
utv_institution=institution
utv_barcode=barcode
utv_verification_code=verification_code
utv_created_timestamp=created_timestamp

# columns for table ROLES_USER_AUTHORITY
roles_user_authority_user_id=user_id
roles_user_authority_authority_id=authority_id
